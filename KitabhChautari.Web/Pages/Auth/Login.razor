@page "/auth/login"
@using KitabhChautari.Web.Auth

@layout EmptyLayout
@inject IAuthApi AuthApi
@inject KitabhChautariAuthStateProvider KitabhChautariAuthStateProvider
@inject NavigationManager NavigationManager


<div class="container">
    <div class="leftContainer">
    </div>

    <div class="rightContainer">
        <h1 class="heading1">Welcome Back</h1>
        <p>Please enter your details</p>
       

        <div class="row">

            <EditForm Model="_model" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator />
                <div class=" mb-3">
                    <label class="form-label"> Email Address : </label>
                    <InputText @bind-Value="_model.Username" class="form-control"/>
                    <ValidationMessage For="() => _model.Username" />
                </div>

                <div class=" mb-3">
                    <label class="form-label"> Password : </label>
                    <InputText type="password" @bind-Value="_model.PasswordHash" class="form-control" />

                    <ValidationMessage For="() => _model.PasswordHash" />
                </div>
                @if(_error != null)
                {
                    <div class=" mb-3 bg-danger text-white p-2">
                        <p>@_error </p> </div>
                }

                <div class="mb-3">
                    @if (!_isLoading)
                    {


                        <button type="submit" class="btn btn-primary">Login</button>
                    }
                    else
                    {
                        <button type="button" disabled class="btn btn-secondary">Logging in ____</button>
                    }
                </div>

            </EditForm>
        </div>


    </div>


</div>
@code {
    private LoginDto _model = new();
    private bool _isLoading;
    private string? _error;


    protected override void OnInitialized()
    {
        if (KitabhChautariAuthStateProvider.IsLoggedIn)
        {
            NavigationManager.NavigateTo("/", replace : true);
        }
    }


    private async Task LoginAsync()
    {
        _error = null;
        _isLoading = true;
        try
        {
            var authResponse = await AuthApi.LoginAsync(_model);
            if(authResponse.HasError)
            {
                _error = authResponse.ErrorMessage;
                return;
            }

            var loggedInUser = authResponse.User;
            await KitabhChautariAuthStateProvider.SetLoginAsync(loggedInUser);

            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _isLoading = false;
        }

        

        
    }
}
